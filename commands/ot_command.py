import discord
from discord import app_commands
from discord.ui import Modal, TextInput, View, button
from datetime import datetime
from pymongo import MongoClient
import os

# ‚úÖ MONGO DB SETUP + DEBUG
MONGO_URL = os.getenv("MONGO_URL")

try:
    mongo_client = MongoClient(MONGO_URL, serverSelectionTimeoutMS=5000)
    mongo_client.server_info()  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    db = mongo_client["pracharuk_medic"]
    collection = db["Shift_Time"]
    safe_url = MONGO_URL.replace(MONGO_URL.split(':')[2].split('@')[0], "***")
    print(f"‚úÖ MongoDB ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {safe_url}")
except Exception as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÑ‡∏î‡πâ: {e}")
    collection = None


class OTModal(Modal, title="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏ß‡∏£"):
    def __init__(self):
        super().__init__()
        self.name = TextInput(label="‡∏ä‡∏∑‡πà‡∏≠ (‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)", placeholder="‡πÄ‡∏ä‡πà‡∏ô Prime McFly", required=True)
        self.start_date = TextInput(label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° (dd-mm-yyyy)", placeholder="‡πÄ‡∏ä‡πà‡∏ô 01-09-2025", required=True)
        self.end_date = TextInput(label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (dd-mm-yyyy)", placeholder="‡πÄ‡∏ä‡πà‡∏ô 09-09-2025", required=True)

        self.add_item(self.name)
        self.add_item(self.start_date)
        self.add_item(self.end_date)

    async def on_submit(self, interaction: discord.Interaction):
        if collection is None:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", ephemeral=True)
            return

        name_val = self.name.value.strip()
        try:
            start = datetime.strptime(self.start_date.value.strip(), "%d-%m-%Y")
            end = datetime.strptime(self.end_date.value.strip(), "%d-%m-%Y")
        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô dd-mm-yyyy)", ephemeral=True)
            return

        if start > end:
            await interaction.response.send_message("‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", ephemeral=True)
            return

        if name_val.lower() == "all":
            # ‡∏ñ‡πâ‡∏≤ all ‡πÉ‡∏´‡πâ‡∏£‡∏≠ confirm ‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞ modal ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
            view = ConfirmAllView(interaction.user, start, end)
            await interaction.response.send_message(
                "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á **‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô**\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:",
                view=view,
                ephemeral=True
            )
            return

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        query = {
            "‡∏ä‡∏∑‡πà‡∏≠": name_val,
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": {
                "$gte": start.strftime("%d-%m-%Y"),
                "$lte": end.strftime("%d-%m-%Y")
            }
        }

        results = list(collection.find(query))

        if not results:
            await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß", ephemeral=True)
            return

        total_hours = sum(entry.get("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", 0) for entry in results)

        embed = discord.Embed(
            title=f"‡∏™‡∏£‡∏∏‡∏õ OT ‡∏Ç‡∏≠‡∏á {name_val}",
            description=f"‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà `{start.strftime('%d-%m-%Y')}` ‡∏ñ‡∏∂‡∏á `{end.strftime('%d-%m-%Y')}`",
            color=discord.Color.teal()
        )
        embed.add_field(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£", value=f"{len(results)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á", inline=False)
        embed.add_field(name="‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°", value=f"{total_hours:.2f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", inline=False)
        embed.timestamp = datetime.utcnow()

        await interaction.response.send_message(embed=embed, ephemeral=True)


class PasswordModal(Modal, title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"):
    password_input = TextInput(label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", style=discord.TextStyle.short, placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", required=True)

    def __init__(self, requester: discord.User, start: datetime, end: datetime, view: View):
        super().__init__()
        self.requester = requester
        self.start = start
        self.end = end
        self.view = view
        self.correct_password = os.getenv("OT_ADMIN_PASSWORD")

    async def on_submit(self, interaction: discord.Interaction):
        if interaction.user.id != self.requester.id:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ", ephemeral=True)
            return

        if self.password_input.value != self.correct_password:
            await interaction.response.send_message("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
            return

        if collection is None:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", ephemeral=True)
            return

        # ‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Üí ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        query = {
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": {
                "$gte": self.start.strftime("%d-%m-%Y"),
                "$lte": self.end.strftime("%d-%m-%Y")
            }
        }
        results = list(collection.find(query))

        if not results:
            await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß", ephemeral=True)
            return

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
        summary = {}
        for entry in results:
            name = entry.get("‡∏ä‡∏∑‡πà‡∏≠", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
            hours = entry.get("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", 0)
            if name not in summary:
                summary[name] = {"count": 0, "hours": 0}
            summary[name]["count"] += 1
            summary[name]["hours"] += hours

        embed = discord.Embed(
            title=f"‡∏£‡∏ß‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô {self.start.strftime('%d/%m/%Y')} - {self.end.strftime('%d/%m/%Y')}",
            color=discord.Color.teal(),
            timestamp=datetime.utcnow()
        )

        items = list(summary.items())
        for i in range(0, len(items), 2):
            name1, data1 = items[i]
            value1 = f"‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£ : {data1['count']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô : {data1['hours']:.2f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
            if i + 1 < len(items):
                name2, data2 = items[i + 1]
                value2 = f"‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£ : {data2['count']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô : {data2['hours']:.2f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
                embed.add_field(name=name1, value=value1, inline=True)
                embed.add_field(name=name2, value=value2, inline=True)
            else:
                embed.add_field(name=name1, value=value1, inline=True)

        embed.set_footer(
            text=f"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢ - {self.requester.display_name}",
            icon_url="https://cdn.discordapp.com/avatars/1284559774557409342/4e8e1f39efb438c295a49a533b39fce5?size=1024"
        )

        await interaction.response.send_message(embed=embed, ephemeral=False)
        self.view.stop()


class ConfirmAllView(View):
    def __init__(self, requester: discord.User, start: datetime, end: datetime):
        super().__init__(timeout=60)
        self.requester = requester
        self.start = start
        self.end = end

    @button(label="üîê ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", style=discord.ButtonStyle.primary)
    async def confirm_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.requester.id:
            await interaction.response.send_message("‚ùå ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", ephemeral=True)
            return

        modal = PasswordModal(self.requester, self.start, self.end, self)
        await interaction.response.send_modal(modal)


@app_commands.command(name="ot", description="‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OT ‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
async def ot(interaction: discord.Interaction):
    await interaction.response.send_modal(OTModal())
